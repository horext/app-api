name: CD Pipeline

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      SERVER_USER:
        required: true
      SERVER_IP:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      ENV_FILE:
        required: true
      DOCKER_PROJECT_NAME:
        required: true
      ENV_FILE_PATH:
        required: true
      SPRING_DATASOURCE_USERNAME:
        required: true
      SPRING_DATASOURCE_PASSWORD:
        required: true
      SPRING_DATASOURCE_URL:
        required: true
      SPRING_DATASOURCE_SCHEMA:
        required: true

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        type: environment
        required: true

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # IMAGE_NAME as <account>/<repo>/branch
  IMAGE_NAME: ${{ github.repository }}/${{ github.ref_name }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.2.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for master branch
            type=raw,value=latest,enable=true

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile.native
          push: true

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: release
    environment: ${{ inputs.environment }}
    env:
      PROJECT_FOLDER: ${{ github.repository}}/${{ github.ref_name }}
      DOCKER_COMPOSE_TEMPLATE_PATH: deploy/docker-compose.yml
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create project folder
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: mkdir -p ${{ env.PROJECT_FOLDER }}

      - name: Upload Docker Compose
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ${{ env.DOCKER_COMPOSE_TEMPLATE_PATH }}
          target: ${{ env.PROJECT_FOLDER }}

      - name: Pull and start docker
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKER_COMPOSE_TEMPLATE: ${{ env.PROJECT_FOLDER }}/${{ env.DOCKER_COMPOSE_TEMPLATE_PATH }}
          ENV_PATH: ${{ env.PROJECT_FOLDER }}/${{ secrets.ENV_FILE_PATH }}
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cat ${{ env.DOCKER_COMPOSE_TEMPLATE }}
            echo "${{ secrets.ENV_FILE }}" > ${{ env.ENV_PATH }}
            echo "IMAGE_NAME=${{ needs.release.outputs.tags }}" >> ${{ env.ENV_PATH }}
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin
            docker pull ${{ needs.release.outputs.tags }}
            docker compose --env-file ${{ env.ENV_PATH }} -p ${{ secrets.DOCKER_PROJECT_NAME }} -f ${{ env.DOCKER_COMPOSE_TEMPLATE }} up -d
            docker system prune --force

  migrate-db:
    name: Migrate Database
    runs-on: ubuntu-latest
    needs: release
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Make Gradlew executable
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew assemble

      - name: Migrate Database
        run: ./gradlew flywayMigrate -i
        env:
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_SCHEMA: ${{ secrets.SPRING_DATASOURCE_SCHEMA }}
