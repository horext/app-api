name: Deploy Pipeline

on:
  push:
    branches:
      - main
      - develop
      - next

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # IMAGE_NAME as <account>/<repo>/branch
  IMAGE_NAME: ${{ github.repository }}/${{ github.ref_name }}
  
jobs:
  build-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
        
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile.native 

  deploy:
    runs-on: ubuntu-latest
    needs: build-publish
    steps:
      - name: Install SSH Client
        run: |
          sudo apt-get update -y
          sudo apt-get install openssh-client -y

      - name: Setup SSH Agent
        run: eval "$(ssh-agent -s)"

      - name: Add SSH Private Key
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to Server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo '${{ secrets.CI_REGISTRY_PASSWORD }}' | docker login ${{ secrets.CI_REGISTRY }} -u ${{ secrets.CI_REGISTRY_USER }} --password-stdin"
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "docker pull ${{ secrets.CI_REGISTRY_IMAGE }}/${{ github.ref }}"
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ${{ secrets.CI_PROJECT_PATH }}/deploy"
          scp $GITHUB_WORKSPACE/${{ secrets.DOCKER_COMPOSE_FILE_PATH }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.CI_PROJECT_PATH }}/${{ secrets.DOCKER_COMPOSE_FILE_PATH }}
          scp $GITHUB_WORKSPACE/${{ secrets.ENV_FILE }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.CI_PROJECT_PATH }}/${{ secrets.ENV_FILE_PATH }}
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "docker compose --env-file ${{ secrets.CI_PROJECT_PATH }}/${{ secrets.ENV_FILE_PATH }} -p ${{ secrets.DOCKER_PROJECT_NAME }} -f ${{ secrets.CI_PROJECT_PATH }}/${{ secrets.DOCKER_COMPOSE_FILE_PATH }} up -d"
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "docker image prune --force"

    env:
      CI_COMMIT_REF_NAME: ${{ github.ref }}
