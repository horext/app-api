name: Deploy Pipeline

on:
  push:
    branches:
      - main
      - develop
      - next

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # IMAGE_NAME as <account>/<repo>/branch
  IMAGE_NAME: ${{ github.repository }}/${{ github.ref_name }}
  
jobs:
  build-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
        
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
                # set latest tag for master branch
                type=raw,value=latest,enable=true
          
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile.native 
          push: true

  deploy:
    runs-on: ubuntu-latest
    needs: build-publish
    environment: main
    env:
      PROJECT_FOLDER: ${{ github.event.repository.name }}/${{ github.ref_name }}+
      DOCKER_COMPOSE_TEMPLATE_PATH: deploy/docker-compose.yml
    steps:
      - name: Create project folder
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script:  mkdir -p ${{ env.PROJECT_FOLDER }}

      - name: Upload Docker Compose
        uses: appleboy/scp-action@master        
        env:
          PROJECT_FOLDER: ${{ github.event.repository.name }}/${{ github.ref }}
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ${{ env.DOCKER_COMPOSE_TEMPLATE_PATH }}
          target: ${{ env.PROJECT_FOLDER }}
        
      - name: Pull and start docker
        uses: appleboy/ssh-action@v0.1.8
        env:
          DOCKER_COMPOSE_TEMPLATE: ${{ env.PROJECT_FOLDER }}/${{ env.DOCKER_COMPOSE_TEMPLATE_PATH }}
          ENV_PATH: ${{ env.PROJECT_FOLDER }}/${{ secrets.ENV_FILE_PATH }}
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cat ${{ env.DOCKER_COMPOSE_TEMPLATE }}
            echo "${{ secrets.ENV_FILE }}" > ${{ env.ENV_PATH }}
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin
            docker pull ${{ needs.build.outputs.tags }}
            docker compose --env-file ${{ env.ENV_PATH }} -p ${{ secrets.DOCKER_PROJECT_NAME }} -f ${{ env.DOCKER_COMPOSE_TEMPLATE }} up -d
            docker system prune --force

